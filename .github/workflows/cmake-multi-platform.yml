name: LVM CPP Edition

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: lvm-linux
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: lvm-linux-clang
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: lvm-windows
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: lvm-windows-clang
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: lvm-macos

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        # 设置可执行文件名称
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "exe-name=lvm_cpp_edition.exe" >> "$GITHUB_OUTPUT"
        else
          echo "exe-name=lvm_cpp_edition" >> "$GITHUB_OUTPUT"
        fi

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake
        
    - name: Init submodule
      run: |
        git submodule update --init --recursive
    
    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ctest -C ${{ matrix.build_type }}
        else
          ctest --build-config ${{ matrix.build_type }}
        fi

    - name: Find and copy executable
      id: find-exe
      shell: bash
      run: |
        # 在不同的构建系统中查找可执行文件
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Windows: 在Release目录或根目录中查找
          if [ -f "${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/${{ steps.strings.outputs.exe-name }}" ]; then
            echo "exe-path=${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/${{ steps.strings.outputs.exe-name }}" >> "$GITHUB_OUTPUT"
          elif [ -f "${{ steps.strings.outputs.build-output-dir }}/${{ steps.strings.outputs.exe-name }}" ]; then
            echo "exe-path=${{ steps.strings.outputs.build-output-dir }}/${{ steps.strings.outputs.exe-name }}" >> "$GITHUB_OUTPUT"
          else
            # 使用find命令搜索
            EXE_PATH=$(find "${{ steps.strings.outputs.build-output-dir }}" -name "${{ steps.strings.outputs.exe-name }}" -type f | head -n1)
            if [ -n "$EXE_PATH" ]; then
              echo "exe-path=$EXE_PATH" >> "$GITHUB_OUTPUT"
            else
              echo "Could not find executable"
              exit 1
            fi
          fi
        else
          # Linux/macOS: 在根目录中查找
          if [ -f "${{ steps.strings.outputs.build-output-dir }}/${{ steps.strings.outputs.exe-name }}" ]; then
            echo "exe-path=${{ steps.strings.outputs.build-output-dir }}/${{ steps.strings.outputs.exe-name }}" >> "$GITHUB_OUTPUT"
          else
            # 使用find命令搜索
            EXE_PATH=$(find "${{ steps.strings.outputs.build-output-dir }}" -name "${{ steps.strings.outputs.exe-name }}" -type f | head -n1)
            if [ -n "$EXE_PATH" ]; then
              echo "exe-path=$EXE_PATH" >> "$GITHUB_OUTPUT"
            else
              echo "Could not find executable"
              exit 1
            fi
          fi
        fi
        echo "Found executable at: ${{ steps.find-exe.outputs.exe-path }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ steps.find-exe.outputs.exe-path }}
        retention-days: 7
